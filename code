
clc;
clear;
close all;

for k = 0:10
    switch k
        case 0
            xyz =rand(12,3)*10000;
%             z;
%             xyz = [xy1 z];
            [xy center_index] = find_center(xyz);
%             xy = [xy(center_index) xy(1:(center_index-1)) xy((center_index+1):end)];
        case 1
            N = size(xy,1);
            a = meshgrid(1:N);
            dmat = reshape(sqrt(sum((xy(a,:)-xy(a',:)).^2,2)),N,N);
        case 2
            salesmen = 2; %number of AUV
        case 3
            min_tour = 6;
		case 4
            max_tour = 10^8;
		case 5
            tw = 0;
        case 6
            pop_size = 100;
        case 7
            num_iter = 350;
        case 8
            use_complex = 0;
		case 9
            show_prog = 1;
        case 10
            show_res = 1;
        otherwise
    end
end

merging_prob = 0.3;

% Verify Inputs
[N,dims] = size(xy);
[nr,nc] = size(dmat);
if N ~= nr || N ~= nc
    error('Invalid XY or DMAT inputs!')
end
n = N - 1; % Separate Start/End City

% Sanity Checks
salesmen = max(1,min(n,round(real(salesmen(1)))));
min_tour = max(1,min(floor(n/salesmen),round(real(min_tour(1)))));
pop_size = max(8,8*ceil(pop_size(1)/8));
num_iter = max(1,round(real(num_iter(1))));
show_prog = logical(show_prog(1));
show_res = logical(show_res(1));

% Initializations for Route Break Point Selection
num_brks = salesmen-1;
dof = n - min_tour*salesmen;          % degrees of freedom
addto = ones(1,dof+1);
for k = 2:num_brks
    addto = cumsum(addto);
end
cum_prob = cumsum(addto)/sum(addto);

% Initialize the Populations
pop_rte = zeros(pop_size,n);          % population of routes
pop_brk = zeros(pop_size,num_brks);   % population of breaks
for k = 1:pop_size
    pop_rte(k,:) = randperm(n)+1;
    pop_brk(k,:) = randbreaks(min_tour,cum_prob,num_brks,n);
end

% Select the Colors for the Plotted Routes
clr = [1 0 0; 0 0 1; 0.67 0 1; 0 1 0; 1 0.5 0];
if salesmen > 5
    clr = hsv(salesmen);
end

% Run the GA
global_min      = Inf;
tmp_pop_8       = cell(1,8);
new_pop         = cell(1,pop_size);
total_dist      = zeros(1,pop_size);
dist_history    = zeros(1,num_iter);
% if show_prog
%     pfig = figure('Name','MTSPF_GA | Current Best Solution','Numbertitle','off');
% end

% ----=== TARNSFORMATION --> multiple chromosome [BEGIN] ===----
pop = cell(1,pop_size);
for k = 1: pop_size
    pop{k}.ch{1} = pop_rte(k, 1:pop_brk(k,1));
    for j=2:salesmen-1
        pop{k}.ch{j} = pop_rte(k, pop_brk(k,j-1)+1:pop_brk(k,j));
    end
    pop{k}.ch{salesmen} = pop_rte(k, pop_brk(k,end)+1:n);
end
% ----=== TARNSFORMATION --> multiple chromosome [END] ===----

penalty_rate = 100;
start_time = cputime; % get actual time for performance measure

for iter = 1:num_iter

     % Evaluate Members of the Population
    for p = 1:pop_size
        d = 0;
        xxx=length(pop{p}.ch);
        for s = 1:length(pop{p}.ch)
            sman = pop{p}.ch{s};
			d2 = 0;

				d2 = d2 + dmat(1,sman(1)) + tw; % Add Start Distance
				for k = 1:length(sman)-1
					d2 = d2 + dmat(sman(k),sman(k+1)) + tw;
				end
				d2 = d2 + dmat(sman(end),1); % Add End Distance
				if (d2 > max_tour)
					d2 = d2 + (d2 - max_tour) * penalty_rate;
				end

			d = d + d2;
        end
        total_dist(p) = d;
    end

    % Find the Best Route in the Population
    [min_dist,index] = min(total_dist);
    dist_history(iter) = min_dist;
    if min_dist < global_min
        global_min = min_dist; % the optimal solution so far
        opt_rte = pop{index}; % the best solution so far
        opt_time = cputime - start_time; % compute the elapsed time
        opt_iter = iter; % store the iteration number
		salesmen = sum(cellfun(@(x) length(x), opt_rte.ch) > 0);
        if show_prog
           %  Plot (the Best Route)
            % figure(pfig);
            for s = salesmen
                rte = [1 opt_rte.ch{s} 1];
                if dims == 3 
                    plot3(xy(rte,1),xy(rte,2),xy(rte,3),'.-','Color',clr(s,:));
                else
                    plot(xy(rte,1),xy(rte,2),'.-','Color',clr(s,:));
                end
%                 title(sprintf('Total Distance = %1.4f, Iteration = %d',min_dist,iter));
legend 
                hold on
            end
            if dims == 3
                plot3(xy(1,1),xy(1,2),xy(1,3),'ko');
            else
                plot(xy(1,1),xy(1,2),'ko'); 
            end
            hold off
        end
    end

    % Genetic Algorithm Operators
    rand_grouping = randperm(pop_size);
    for p = 8:8:pop_size
        rpop    = pop(rand_grouping(p-7:p));
        dists   = total_dist(rand_grouping(p-7:p));
        [ignore,idx] = min(dists);
        best_of_8 = rpop{idx};
		best_of_8.ch(:,cellfun(@(c) isempty(c), best_of_8.ch)) = [];
        
        for k = 1:8 % Generate New Solutions
            
            tmp_pop_8{k} = best_of_8;
			lbestch = length(best_of_8.ch);
            switch k
                case 2 % Flip
                    r = randperm(lbestch);
                    smen = r(1:ceil(rand*lbestch)); % salesmen selected for flip
                    for k2 = 1:length(smen)
						if ~isempty(best_of_8.ch{smen(k2)})
							rte_ins_pts = sort(ceil(length(best_of_8.ch{smen(k2)})*rand(1,2)));
							I = rte_ins_pts(1);
							J = rte_ins_pts(2);
							tmp_pop_8{k}.ch{smen(k2)}(I:J)   = fliplr(tmp_pop_8{k}.ch{smen(k2)}(I:J));
						end
                    end
                case 3 % Swap
                    smen = ceil(rand(1,2)*lbestch); % the 2 salesmen selected for swap
                    rte_ins_pts = sort(ceil(min(length(best_of_8.ch{smen(1)}),length(best_of_8.ch{smen(2)}))*rand(1,2)));
                    I = rte_ins_pts(1);
                    J = rte_ins_pts(2);
					if ~isempty(best_of_8.ch{smen(1)})
						tempseq = tmp_pop_8{k}.ch{smen(1)}(I:J);
						tmp_pop_8{k}.ch{smen(1)}(I:J) = tmp_pop_8{k}.ch{smen(2)}(I:J);
						tmp_pop_8{k}.ch{smen(2)}(I:J) = tempseq;
					end
                case 4 % Slide
                    r = randperm(lbestch);
                    smen = r(1:ceil(rand*lbestch)); % salesmen selected for slide
                    toslide = tmp_pop_8{k}.ch{smen(1)}(end);
                    for k2 = 2:length(smen)
						if ~isempty(best_of_8.ch{smen(k2)})
							tempgene = tmp_pop_8{k}.ch{smen(k2)}(end);
							tmp_pop_8{k}.ch{smen(k2)}(2:end) = tmp_pop_8{k}.ch{smen(k2)}(1:end-1);
							tmp_pop_8{k}.ch{smen(k2)}(1) = toslide;
							toslide = tempgene;
						end
                    end
                    tmp_pop_8{k}.ch{smen(1)}(2:end) = tmp_pop_8{k}.ch{smen(1)}(1:end-1);
                    tmp_pop_8{k}.ch{smen(1)}(1) = toslide;
                    case 5 % Flip
                    r = randperm(lbestch);
                    smen = r(1:ceil(rand*lbestch)); % salesmen selected for flip
                    for k2 = 1:length(smen)
						if ~isempty(best_of_8.ch{smen(k2)})
							rte_ins_pts = sort(ceil(length(best_of_8.ch{smen(k2)})*rand(1,2)));
							I = rte_ins_pts(1);
							J = rte_ins_pts(2);
							tmp_pop_8{k}.ch{smen(k2)}(I:J)   = fliplr(tmp_pop_8{k}.ch{smen(k2)}(I:J));
						end
                    end
                case 6 % Swap
                    smen = ceil(rand(1,2)*lbestch); % the 2 salesmen selected for swap
                    rte_ins_pts = sort(ceil(min(length(best_of_8.ch{smen(1)}),length(best_of_8.ch{smen(2)}))*rand(1,2)));
                    I = rte_ins_pts(1);
                    J = rte_ins_pts(2);
					if ~isempty(best_of_8.ch{smen(1)})
						tempseq = tmp_pop_8{k}.ch{smen(1)}(I:J);
						tmp_pop_8{k}.ch{smen(1)}(I:J) = tmp_pop_8{k}.ch{smen(2)}(I:J);
						tmp_pop_8{k}.ch{smen(2)}(I:J) = tempseq;
					end
                case 7 % Slide
                    r = randperm(lbestch);
                    smen = r(1:ceil(rand*lbestch)); % salesmen selected for slide
                    toslide = tmp_pop_8{k}.ch{smen(1)}(end);
                    for k2 = 2:length(smen)
						if ~isempty(best_of_8.ch{smen(k2)})
							tempgene = tmp_pop_8{k}.ch{smen(k2)}(end);
							tmp_pop_8{k}.ch{smen(k2)}(2:end) = tmp_pop_8{k}.ch{smen(k2)}(1:end-1);
							tmp_pop_8{k}.ch{smen(k2)}(1) = toslide;
							toslide = tempgene;
						end
                    end
                    tmp_pop_8{k}.ch{smen(1)}(2:end) = tmp_pop_8{k}.ch{smen(1)}(1:end-1);
                    tmp_pop_8{k}.ch{smen(1)}(1) = toslide;
                    
                    
                    case 8 % Flip
                    r = randperm(lbestch);
                    smen = r(1:ceil(rand*lbestch)); % salesmen selected for flip
                    for k2 = 1:length(smen)
						if ~isempty(best_of_8.ch{smen(k2)})
							rte_ins_pts = sort(ceil(length(best_of_8.ch{smen(k2)})*rand(1,2)));
							I = rte_ins_pts(1);
							J = rte_ins_pts(2);
							tmp_pop_8{k}.ch{smen(k2)}(I:J)   = fliplr(tmp_pop_8{k}.ch{smen(k2)}(I:J));
						end
                    end

                otherwise % Do Nothing
            end
        end
        for i=1:8

            new_pop{p-8+i} = tmp_pop_8{i};
            length111(i) = sum(cellfun(@(x) length(x), tmp_pop_8{i}.ch) > 0);
        end
    end
    pop = new_pop;
end


if show_res
    % Plots
    figure('Name','MTSPF_GA | Results','Numbertitle','off');
    subplot(2,2,1);
    if dims == 3, plot3(xy(:,1),xy(:,2),xy(:,3),'k.');
    else plot(xy(:,1),xy(:,2),'k.'); end
    title('City Locations');
%     subplot(2,2,2);
%     imagesc(dmat([1 opt_rte.ch{:}],[1 opt_rte.ch{:}]));
%     title('Distance Matrix');
    subplot(2,2,2);
    for s = 1:salesmen
        rte = [1 opt_rte.ch{s} 1];
        if dims == 3, plot3(xy(rte,1),xy(rte,2),xy(rte,3),'.-','Color',clr(s,:));
        else plot(xy(rte,1),xy(rte,2),'.-','Color',clr(s,:)); end
        title(sprintf('Total Distance = %1.4f',min_dist));
        hold on;
        opt_rtea.ch=cell(2,salesmen);
        opt_rtea.ch{1,s}=opt_rte.ch{s};
        opt_rtea.ch{2,s}=fliplr(opt_rte.ch{1,s});


    end
for s=1:salesmen
    
    
    subplot(2,2,3);
    plot(dist_history,'b','LineWidth',2);
    title('Best Solution History');
    set(gca,'XLim',[0 num_iter+1],'YLim',[0 1.1*max([1 dist_history])]);
end
    
end
opt_rtea.ch=cell(2,salesmen);

for s = 1:3
    opt_rtea.ch{1,s}=opt_rte.ch{1,s};
    opt_rtea.ch{2,s}=fliplr(opt_rte.ch{1,s});
end








